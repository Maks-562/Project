import DMN2 as DMN
import pickle
import time
from matplotlib import pyplot as plt
import Data_Gen as DG
import os 
# file used for the training of the network


# values taken from https://matmake.com/pure-metals.html
# Only did it to get somewhat realistic data.

Aluminium = {'E':70.2,'v':0.345,'G':27.8}
Bismuth = {'E':34,'v':0.33,'G':34.97}
Calcium = {'E':19.6,'v':0.31,'G':7.85}
Cobalt = {'E':211,'v':0.32,'G':82}
Copper = {'E':130,'v':0.343,'G':48.3}
Gallium = {'E':9.81,'v':0.47,'G':6.67}
Gold = {'E':78.5,'v':0.42,'G':26}
Iron = {'E':208.2,'v':0.291,'G':81.6}
Lithium = {'E':4.91,'v':0.362,'G':4.24}
Magnesium = {'E':44.7,'v':0.291,'G':17.3}
Nickel = {'E':199.5,'v':0.312,'G':76}
Osmium = {'E':558.6,'v':0.25,'G':223}
Platinum = {'E':172.4,'v':0.397,'G':60.9}
Plutonium = {'E':87.5,'v':0.18,'G':34.5}
Tungsten = {'E':411,'v':0.28,'G':160}


materials = [Aluminium,Bismuth,Calcium,Cobalt,Copper,Gallium,Gold,Iron,Lithium,Magnesium,Nickel,Osmium,Platinum,Plutonium,Tungsten]


# checks if the data set exists, if not it creates it.
if not os.path.exists('Dummy_Data.csv'):
    DG.create_proper_dataset(materials)
 
x = DMN.read_data('Dummy_Data.csv')


training_data = []

M = len(x)


for i in range(M):
    p1 = x[i][0]
    p2 = x[i][1]
    p_dns = x[i][2]
    
    training_data.append([p1,p2,p_dns])

start = time.time()

N = 5
epoch_num = 20

# number of elements in mini batch must be able to divide the number of training data examples.
# in my current fummy data set, I have 105 examples and 105/21 = 5
mini_batch_size = 21


# creates the variable name for the network
Model = DMN.Tree(N)    

# creates the entire network,
# linking nodes in the desired way.
# root stores all the important data. Model 
# provides the methods to train the network
# and perform operations, such as feedforward etc.
root = Model.initialise()


# The actual training step.
error = Model.SGD(epoch_num,root,mini_batch_size,training_data,0.05,True)

plt.plot(error)
plt.ylabel('Relative Error (%)' ) 
plt.xlabel('Epoch')
plt.legend([f'N = {N}'])

plt.savefig('error.jpg', dpi = 500)


end = time.time()



print(f'The training process took {(end -start):.2f} s to complete')





#with open('net.pkl','wb') as f:
    #pickle.dump(Model,f)


# with open('root.pkl','wb') as f:
    # pickle.dump(root,f)

